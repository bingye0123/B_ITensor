
#include "symMonteCarlo.h"

#include "core.h"

//#include "model/tjmod.h"
//#include "hams/tJham.h"
#include "model/hubbardmod.h"
#include "hams/ExtendedHubbardham.h"

using boost::format;
using namespace std;

//typedef tJ
typedef Hubbard
states;



int
main(int argc, char* argv[])
{
    int N = 32;
    
    //
    // Initialize the site degrees of freedom.
    //
    states model(N);    // make a chain of N spins
    
    //
    // Create the Hamiltonian matrix product operator (MPO)
    //
    //IQMPO H = tJChain(model);
    const IQMPO H = ExtendedHubbard(model,Opt("U",2.0)& Opt("t1",1)& Opt("t2",0.0)& Opt("V1",0));
	
    //
    // Set the initial wavefunction matrix product state (MPS)
    // to be a Neel state.
    //
    InitState initState(model);
	//up and down spins
    for(int i = 1; i <= N; ++i)
    {
        if(i%2 == 1)
            initState.set(i,"Up");
        else
            initState.set(i,"Dn");
    }
	//holes
    //for(int i = 1; i <= 8; ++i)
    //{
	  //initState.set(i,"Emp");
    //}
	initState.set(2,"Emp");
	initState.set(5,"Emp");
	initState.set(9,"Emp");
	initState.set(14,"Emp");
	initState.set(20,"Emp");
	initState.set(23,"Emp");
	initState.set(27,"Emp");
	initState.set(32,"Emp");
    
    IQMPS psi(initState);

    //
    // psiHphi calculates matrix elements of MPO's with respect to MPS's
    // psiHphi(psi,H,psi) = <psi|H|psi>
    //
    cout << totalQN(psi) << endl;
	cout << format("Initial energy = %.5f") % psiHphi(psi,H,psi) << endl;

    //
    // Set the parameters controlling the accuracy of the DMRG
    // calculation for each DMRG sweep.
    // Here less than 5 cutoff values are provided, for example,
    // so all remaining sweeps will use the last one given (= 1E-10).
    //

    int Nsweeps=112;
    Sweeps sweeps(Nsweeps);
    sweeps.maxm() = 10,10,20,20,20,20,100,100,100,100,100,200,200,200,200,200,500,500,500,500,500,500,500,500,1000,1000,1000,1000,1000,1000,1000,1000,2000,2000,2000,2000,2000,2000,2000,2000,3000,3000,3000,3000,3000,3000,3000,3000,4000,4000,4000,4000,4000,4000,4000,4000,5000,5000,5000,5000,5000,5000,5000,5000,6000,6000,6000,6000,6000,6000,6000,6000,7000,7000,7000,7000,7000,7000,7000,7000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000,8000;

    sweeps.cutoff() = 1E-10,1E-10,0.;
    sweeps.niter() = 2;
    sweeps.noise() = 1E-7,1E-7,1E-8,1E-8,1E-8,1E-8,1E-8,1E-9,1E-9,1E-9,1E-9,1E-9,0.;
    cout << sweeps;
    
    //
    // Begin the DMRG calculation
    //
   
      
    Real En = dmrg(psi,H,sweeps,Quiet());
    //
    // Print the final energy reported by DMRG
    //
    cout << format("\nGround State Energy = %.10f")%En << endl;
    
      cout<<"Writing to disk:"<<endl;
    	writeToFile("psi_dat",psi);
	writeToFile("model_dat",model);
	writeToFile("Ham_dat",H);
      cout<<"Writing done."<<endl;
    
    
    cout  <<"Energy: " << psiHphi(psi,H,psi)<<endl;

	psi.position(1);
	cout << "Norm2: " << Dot(conj(psi.A(1)), psi.A(1))<<endl;
	
	ITdVec nup_vec(N),ndn_vec(N);
	
	for(int j=1; j<=N; j++) {
		IQTensor nup_op = model.op("Nup",j);
	        IQTensor ndn_op = model.op("Ndn",j);
		psi.position(j);
		IQTensor ket = psi.A(j);
		IQTensor bra = conj(primed(ket,Site));
		nup_vec(j-1) = Dot(bra, nup_op*ket);
		ndn_vec(j-1) = Dot(bra, ndn_op*ket);
	}
	
	cout<<"Nup: "<<nup_vec<<endl;
	cout<<"Ndn: "<<ndn_vec<<endl;
	cout<<"Total N: "<<nup_vec+ndn_vec<<endl;
	cout<<"Sz: "<<0.5*(nup_vec-ndn_vec)<<endl;
	
	psi.position(1);

    
	


/*
	ITiVec inv_sym_mapping_table(N);
	//inversion: site -> N-1-site
	for(int i=0;i<inv_sym_mapping_table.size();i++)
	{
	  inv_sym_mapping_table(i)=N-1-i;
	}
	for(int i=0;i<1;i++)
	{
	cout<<"sym eigval: "<<symmetry_eigval_hubbard(psi,inv_sym_mapping_table)<<endl;
	}
*/
	
    return 0;
}


