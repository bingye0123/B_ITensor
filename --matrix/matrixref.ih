// Inlines for matrixref.h
#ifdef MATRIXBOUNDS
#define	CHECKINDEX(i)	checkindex(i)
#define	CHECKINDEX0(i)	checkindex0(i)
#define	CHECKIND(i,j)	checkindex(i,j)
#define	CHECKIND0(i,j)	checkindex0(i,j)
#else
#define	CHECKINDEX(i)
#define	CHECKINDEX0(i)
#define	CHECKIND(i,j)
#define	CHECKIND0(i,j)
#endif

inline Real* VectorRef::Store() const { return store; }			

// inline Real*& VectorRef::AccessStore() { return store; }			

inline int VectorRef::Length() const { return length; }

inline int VectorRef::Stride() const { return stride; }

inline Real VectorRef::Scale() const { return scale; }

inline Real* VectorRef::Last() const { return store+(length-1)*stride; }

inline Real* VectorRef::First() const { return store; }

inline VectorRef::VectorRef() { init();}

inline VectorRef::VectorRef(const StoreLink & sl,Real *st, 
    int len, int str, Real sca) : slink(sl) 
    { store=st; length=len; stride=str; scale=sca; }

inline VectorRef::VectorRef(const VectorRef & V) 
    : slink(V.slink) { copyvars(V); }

inline VectorRef & VectorRef::operator<<(const VectorRef & V)		
    { slink << V.slink; copyvars(V); return *this; }

inline Real VectorRef::operator() (int i) const	
    { CHECKINDEX(i); return scale * store[(i - 1) * stride]; }

inline Real VectorRef::el(int i) const		
    { CHECKINDEX0(i); return scale * store[i * stride]; }

inline void VectorRef::Put(int i,Real a) { Put0(i-1,a); }

inline VectorRef & VectorRef::operator-= (const VectorRef & other)
    { *this += -other; return *this; }

inline VectorRef & VectorRef::operator= (const VectorVectorRes &R)
    { assign(R,0); return *this; }

inline VectorRef & VectorRef::operator+= (const VectorVectorRes &R)
    { assign(R,1); return *this; }

inline VectorRef & VectorRef::operator= (const MatrixVectorRes &R)
    { assign(R,0); return *this; }

inline VectorRef & VectorRef::operator+= (const MatrixVectorRes &R)
    { assign(R,1); return *this; }

inline VectorRef & VectorRef::operator/= (Real fac)
    { *this *= 1.0/fac; return *this; }

inline VectorRef VectorRef::operator* (Real fac) const
    { return VectorRef(slink,store,length,stride,scale*fac); } 

inline VectorRef operator* (Real fac, const VectorRef& V)
    { return V * fac; }

inline VectorRef VectorRef::operator/ (Real fac) const
    { return VectorRef(slink,store,length,stride,scale/fac); } 

inline VectorRef VectorRef::operator- () const
    { return VectorRef(slink,store,length,stride,-scale); } 

inline VectorRef VectorRef::SubVector(int l, int u) const
    { 
    if(u > length || l < 1 || u < l)
	_merror("bad call to SubVector");
    return VectorRef(slink,store+(l-1)*stride, u-l+1, stride, scale); 
    }

inline VectorRef VectorRef::SubVector0(int l, int u) const
    {
    return SubVector(l+1,u+1);
    }

inline VectorRef VectorRef::SubVector(int first, int len, int str) const
    { 
    if(length <= 0 || first < 1 || first + (len-1) * str > length)
	_merror("bad call to SubVector");
    return VectorRef(slink,store+(first-1)*stride, len, stride * str, scale); 
    }

inline VectorRef VectorRef::SubVector0(int first, int len, int str) const
    {
    return SubVector(first+1,len,str);
    }

inline void VectorRef::init()
    { store = 0; length = 0; stride = 0; scale = 1.0; }

inline void VectorRef::copyvars(const VectorRef &V) 
    { store=V.store; length=V.length; stride=V.stride; scale=V.scale; }

inline void VectorRef::checkcompatibility(const VectorRef &other) const
    { if (length != other.length)_merror("VectorRef: unequal lengths");}

inline void VectorRef::checkassignable() const
    { if (scale != 1.0) _merror("VectorRef assignment: scale != 1.0"); }

inline void VectorRef::checkindex(int i) const
    {
    if (i < 1 || i > length)
	{
    std::cerr << "index=(" << i << ")\n";
	_merror("VectorRef: index out of bounds");
	}
    }

inline void VectorRef::checkindex0(int i) const
    { checkindex(i+1); }

inline VectorRef & VectorRef::operator -= (const VectorVectorRes &R)
    { *this += -R; return *this; }

inline VectorRef & VectorRef::operator -= (const MatrixVectorRes &R)
    { *this += -R; return *this; }

inline VectorVectorRes 
operator + (const VectorRef & V1, const VectorRef &V2)
    { return VectorVectorRes(V1,V2,addition); }

inline VectorVectorRes 
operator - (const VectorRef & V1, const VectorRef &V2)
    { return VectorVectorRes(V1,-V2,addition); }

inline MatrixVectorRes 
operator * (const MatrixRef & M, const VectorRef &V)
    { return MatrixVectorRes(M,V,multiplication); }

inline MatrixVectorRes 
operator * (const VectorRef &V, const MatrixRef & M)
    { return MatrixVectorRes(M.t(),V,multiplication); }

inline MatrixMatrixRes 
operator + (const MatrixRef & M1, const MatrixRef &M2)
    { return MatrixMatrixRes(M1,M2,addition); }

inline MatrixMatrixRes 
operator - (const MatrixRef & M1, const MatrixRef &M2)
    { return MatrixMatrixRes(M1,-M2,addition); }

inline MatrixMatrixRes 
operator * (const MatrixRef & M1, const MatrixRef &M2)
    { return MatrixMatrixRes(M1,M2,multiplication); }

inline VectorVectorRes 
operator * (Real a, const VectorVectorRes & A)
    { return A * a; }

inline MatrixMatrixRes 
Transpose(const MatrixMatrixRes & A)
    { return A.t(); }

inline MatrixMatrixRes 
operator * (Real a, const MatrixMatrixRes & A)
    { return A * a; }

inline MatrixVectorRes 
operator * (Real a, const MatrixVectorRes & A)
    { return A * a; }

// Two VectorRefs are free from overlap if the are in separate
// locations in memory, or if the have identical strides but
// are offset by a non-multiple of the stride

inline int 
overlaps(const VectorRef & A, const VectorRef & B)
    { return !( A.Last() < B.First() || B.Last() < A.First() 
    || (A.Stride() == B.Stride() && (A.Last()-B.First())%A.Stride() != 0 ) ); }

inline int 
overlaps(const MatrixRef & A, const MatrixRef & B)
    { return !( A.Last() < B.First() || B.Last() < A.First() ); }

inline int 
overlaps(const MatrixRef & A, const VectorRef & B)
    { return !( A.Last() < B.First() || B.Last() < A.First() ); }

inline int 
overlaps(const VectorRef & A, const MatrixRef & B)
    { return overlaps(B,A); }

inline VectorRefBare::VectorRefBare(const VectorRef & V) : VectorRef(V)
    { if(scale != 1.0) _merror("scale != 1.0 in VectorRefBare"); }

inline Real VectorRefBare::operator () (int i) const
    { CHECKINDEX(i); return store[(i-1) * stride]; }

inline Real & VectorRefBare::operator () (int i) 
    { CHECKINDEX(i); return store[(i-1) * stride]; }

inline Real   VectorRefBare::el(int i) const
    { CHECKINDEX0(i); return store[i * stride]; }

inline Real & VectorRefBare::el(int i) 
    { CHECKINDEX0(i); return store[i * stride]; }

inline Real* MatrixRef::Store() const
    { return store; }			// Allow access to store 

inline int MatrixRef::Nrows() const
    { return (transpose ? ncols : nrows); }

inline int MatrixRef::Ncols() const
    { return (transpose ? nrows : ncols); }

inline int MatrixRef::RowStride() const
    { return rowstride; }

inline Real MatrixRef::Scale() const
    { return scale; }

inline int MatrixRef::DoTranspose() const
    { return transpose; }

inline Real* MatrixRef::Last() const
    { return store+(nrows-1)*rowstride+ncols; }

inline Real* MatrixRef::First() const
    { return store; }

inline MatrixRef::MatrixRef () 
    { init(); }

inline MatrixRef::MatrixRef(const MatrixRef &M) : slink(M.slink)
	{ copyvars(M); }

inline MatrixRef& MatrixRef::operator<<(const MatrixRef & M)
    { slink << M.slink; copyvars(M); return *this; }

inline Real MatrixRef::operator() (int i, int j) const 
    { CHECKIND(i,j); return scale * store[index(i,j)]; }

inline Real MatrixRef::el(int i, int j) const
    { CHECKIND0(i,j); return scale * store[index0(i,j)]; }

inline void MatrixRef::Put(int i,int j,Real a)
    { Put0(i-1,j-1,a); }

inline VectorRef MatrixRef::Row(int i) const
    {
    if(i>Nrows() || i<1) _merror("VectorRef::Row i > Nrows() || i < 1");
    return VectorRef(slink, store + (i - 1) * (transpose ? 1 : rowstride),
	     transpose ? nrows : ncols, transpose ? rowstride : 1,scale);
    }

inline VectorRef MatrixRef::Column(int i) const
    {
    if(i>Ncols() || i<1)_merror("VectorRef::Column i > Ncols() || i < 1");
    return VectorRef(slink, store + (i - 1) * (transpose ? rowstride : 1),
	 transpose ? ncols : nrows, transpose ? 1 : rowstride,scale);
    }

inline VectorRef MatrixRef::Diagonal() const
    { return VectorRef(slink,store,min(nrows,ncols),rowstride+1,scale); }

inline MatrixRef MatrixRef::SubMatrix(int il, int iu, int jl, int ju) const
    { 
    if(iu > Nrows() || il < 1 || iu < il) _merror("bad call to SubMatrix");
    if(ju > Ncols() || jl < 1 || ju < jl) _merror("bad call to SubMatrix");
    if(transpose) { trade(il,jl); trade(iu,ju); }
    MatrixRef res(*this);
    res.nrows = iu - il + 1;
    res.ncols = ju - jl + 1;
    res.store += (il - 1) * rowstride + jl - 1;
    return res;
    }

inline MatrixRef MatrixRef::SubMatrix(int iu, int ju) const
    { return SubMatrix(1, iu, 1, ju); }

inline MatrixRef MatrixRef::Columns(int jl, int ju) const
    { return SubMatrix(1,Nrows(),jl,ju); }

inline MatrixRef MatrixRef::Rows(int il, int iu) const
    { return SubMatrix(il,iu,1,Ncols()); }

inline VectorRef MatrixRef::Column0(int i) const
    { return Column(i+1); }

inline VectorRef MatrixRef::Row0(int i) const
    { return Row(i+1); }

inline MatrixRef MatrixRef::SubMatrix0(int il, int iu, int jl, int ju) const
    { return SubMatrix(il+1,iu+1,jl+1,ju+1); }

inline MatrixRef MatrixRef::SubMatrix0(int iu,int ju) const
    { return SubMatrix(1,iu+1,1,ju+1); }

inline MatrixRef MatrixRef::Columns0(int jl, int ju) const
    { return Columns(jl+1,ju+1); }

inline MatrixRef MatrixRef::Rows0(int il, int iu) const
    { return Rows(il+1,iu+1); }

inline VectorRef MatrixRef::TreatAsVector() const
    {
    if(rowstride != ncols)
	_merror("bad call to TreatAsVector");
    return VectorRef(slink, store, nrows * ncols, 1, scale);
    }

inline MatrixRef & MatrixRef::operator -= (const MatrixRef & other)
    { *this += -other; return *this; }

inline MatrixRef & MatrixRef::operator  = (const MatrixMatrixRes &R)
    { assign(R,0); return *this; }

inline MatrixRef & MatrixRef::operator += (const MatrixMatrixRes &R)
    { assign(R,1); return *this; }

inline MatrixRef & MatrixRef::operator -= (const MatrixMatrixRes &R)
    { MatrixMatrixRes rr(R); rr.scale *= -1.0; assign(rr,1); return *this; }

inline MatrixRef & MatrixRef::operator -= (Real a)
    { *this += -a; return *this; }

inline MatrixRef MatrixRef::t() const
    { MatrixRef res(*this); res.transpose = !res.transpose; return res; }

inline MatrixRef MatrixRef::t(int dotrans) const
    {
    MatrixRef res(*this);
    if (dotrans)
	res.transpose = !res.transpose;
    return res;
    }

inline MatrixRef Transpose(const MatrixRef & M) 
    { return M.t(); }

inline MatrixRef MatrixRef::operator *(Real fac) const
    { MatrixRef res(*this); res.scale *= fac; return res; }

inline MatrixRef operator* (Real fac, const MatrixRef& V)
    { return V * fac; }

inline MatrixRef MatrixRef::operator/ (Real fac) const
    { return *this * (1.0/fac); }

inline MatrixRef MatrixRef::operator- () const	// Negate 
    { return *this * (-1.0); }

inline Real Trace(const MatrixRef& M)
    { return M.Diagonal().sumels(); }

inline void MatrixRef::checkcompatibility(const MatrixRef &other) const
    {
    if(Nrows() != other.Nrows())
	_merror("MatrixRef compatibility: unequal nrows");
    if(Ncols() != other.Ncols())
	_merror("MatrixRef compatibility: unequal ncols");
    }

inline void MatrixRef::checkassignable() const
    {
    if (transpose != 0)
	_merror("MatrixRef assignment: transpose != 0");
    if (scale != 1.0)
	_merror("MatrixRef assignment: scale != 1.0");
    }

inline void MatrixRef::init() 
    { store = 0; scale = 1.0; nrows = ncols = rowstride = transpose = 0; }

inline void MatrixRef::copyvars(const MatrixRef &M) 
    {  
    store = M.store; nrows = M.nrows; ncols = M.ncols;
    rowstride = M.rowstride; transpose = M.transpose; scale = M.scale;
    }

inline int MatrixRef::index0(int i, int j) const
    { return transpose ? j * rowstride + i : i * rowstride + j; }

inline int MatrixRef::index(int i, int j) const
    { return index0(i-1,j-1); }

inline void MatrixRef::checkindex(int i,int j) const
    {
    if (i < 1 || i > Nrows() || j < 1 || j > Ncols())
	{
    std::cerr << "index=(" << i << "," << j << ") ";
	_merror("MatrixRef: index out of bounds");
	}
    }

inline void MatrixRef::checkindex0(int i,int j) const
    { checkindex(i+1,j+1); }

inline int MatrixRef::memory() const
    { return sizeof(MatrixRef) + slink.memory()/slink.NumRef(); }

inline int MatrixRef::NumRef() const
    { return slink.NumRef(); }

inline Real  MatrixRefBare::operator () (int i, int j) const
    { CHECKIND(i,j); return store[(i-1) * rowstride + j - 1]; }

inline Real& MatrixRefBare::operator () (int i, int j) 
    { CHECKIND(i,j); return store[(i-1) * rowstride + j - 1]; }

inline Real  MatrixRefBare::el (int i, int j) const
    { CHECKIND0(i,j); return store[i * rowstride + j]; }

inline Real& MatrixRefBare::el( int i, int j) 
    { CHECKIND0(i,j); return store[i * rowstride + j]; }

inline MatrixRefBare::MatrixRefBare(const MatrixRef & V)
    	: MatrixRef(V)
    {
    if(scale != 1.0) _merror("scale != 1.0 in MatrixRefBare");
    if(transpose) _merror("transpose != 0 in MatrixRefBare");
    }

inline int VectorVectorRes::Length() const
    { return a.Length(); }

inline VectorVectorRes::VectorVectorRes(const VectorVectorRes & A) 
    : a(A.a), b(A.b) { op = A.op; scale = A.scale; }

inline VectorVectorRes::VectorVectorRes
	(const VectorRef & ax, const VectorRef & bx, binop opx,
	    Real sca) : a(ax), b(bx)
    {
    if (ax.Length() != bx.Length())
	_merror("ax.Length() != bx.Length() in VectorVectorRes");
    if (ax.Length() == 0)
	_merror("ax.Length() == 0 in VectorVectorRes");
    op = opx;
    scale = sca;
    }

inline VectorVectorRes VectorVectorRes::operator *(Real aa) const
    { VectorVectorRes res(*this); res.scale *= aa; return res; }

inline VectorVectorRes VectorVectorRes::operator / (Real fac) const
    { return *this * (1.0/fac); }

inline VectorVectorRes VectorVectorRes::operator - () const
    { return (*this) * -1.0; }

inline int MatrixMatrixRes::Nrows() const
    { return transpose ? b.Ncols() : a.Nrows(); }

inline int MatrixMatrixRes::Ncols() const
    { return transpose ? a.Nrows() : b.Ncols(); }

inline MatrixMatrixRes::MatrixMatrixRes() { }

inline MatrixMatrixRes::MatrixMatrixRes(const MatrixMatrixRes & A) 
	: a(A.a), b(A.b)
    { op = A.op; scale = A.scale; transpose = A.transpose; }

inline MatrixMatrixRes::MatrixMatrixRes(const MatrixRef &ax, 
	const MatrixRef &bx, binop opx, Real sca, int tran) 
	: a(ax), b(bx)
    {
    op = opx;
    scale = sca;
    transpose = tran;
    }

inline MatrixMatrixRes MatrixMatrixRes::t() const
    {
    MatrixMatrixRes res(*this);
    res.transpose = !res.transpose;
    return res; 
    }

inline MatrixMatrixRes MatrixMatrixRes::operator *(Real fac) const
    { MatrixMatrixRes res(*this); res.scale *= fac; return res; }

inline MatrixMatrixRes MatrixMatrixRes::operator / (Real fac) const
    { return *this * (1.0/fac); }

inline MatrixMatrixRes MatrixMatrixRes::operator - () const
    { return (*this) * -1.0; }

inline int MatrixVectorRes::Length() const
    { return a.Nrows(); }

inline MatrixVectorRes::MatrixVectorRes() { }

inline MatrixVectorRes::MatrixVectorRes(const MatrixVectorRes & A) 
    : a(A.a), b(A.b) { op = A.op; scale = A.scale; }

inline MatrixVectorRes::MatrixVectorRes(const MatrixRef &ax, 
	const VectorRef & bx, binop opx, Real sca) 
    : a(ax), b(bx) 
    {
    if(ax.Ncols() != bx.Length())
	_merror("ax.Ncols() != bx.Length()) in MatrixVectorRes");
    op = opx;
    scale = sca;
    }

inline MatrixVectorRes MatrixVectorRes::operator *(Real aa) const
    { MatrixVectorRes res(*this); res.scale *= aa; return res; }

inline MatrixVectorRes MatrixVectorRes::operator / (Real fac) const
    { return *this * (1.0/fac); }

inline MatrixVectorRes MatrixVectorRes::operator - () const
    { return (*this) * -1.0; }

inline RowIter::RowIter(const MatrixRef & M) : VectorRef(M.Row(1))
    {
    rowinc = M.index(2, 1);
    finish = store + M.Nrows() * rowinc;
    store -= rowinc;
    }

inline int RowIter::inc()
    { store += rowinc; return store < finish; }

inline VectorRef & RowIter::operator = (const VectorRef &other)
    { return VectorRef::operator=(other); }

inline VectorRef & RowIter::operator = (const RowIter &other)
    { return VectorRef::operator=(other); }

inline VectorRef & RowIter::operator = (const VectorVectorRes &other)
    { return VectorRef::operator=(other); }

inline VectorRef & RowIter::operator = (const MatrixVectorRes &other)
    { return VectorRef::operator=(other); }

inline VectorRef & RowIter::operator = (Real a)
    { return VectorRef::operator=(a); }

inline ColumnIter::ColumnIter(const MatrixRef & M) 
	: VectorRef(M.Column(1))
    {
    colinc = M.index(1, 2);
    finish = store + M.Ncols() * colinc;
    store -= colinc;
    }

inline int ColumnIter::inc()
    { store += colinc; return store < finish; }

inline VectorRef & ColumnIter::operator = (const VectorRef &other)
    { return VectorRef::operator=(other); }

inline VectorRef & ColumnIter::operator = (const ColumnIter &other)
    { return VectorRef::operator=(other); }

inline VectorRef & ColumnIter::operator = (const VectorVectorRes &other)
    { return VectorRef::operator=(other); }

inline VectorRef & ColumnIter::operator = (const MatrixVectorRes &other)
    { return VectorRef::operator=(other); }

inline VectorRef & ColumnIter::operator = (Real a)
    { return VectorRef::operator=(a); }

inline VIter::VIter(const VectorRef & V)
    {
    stride = V.Stride(); store = V.Store();
    finish = store + V.Length() * stride;
    }

inline void VIter::inc()
    { store += stride; }

inline int VIter::test() const
    { return store < finish; }

inline Real & VIter::val()
    { return *store; }

