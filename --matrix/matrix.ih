// Inlines for matrix.h

inline void Matrix::init()
    { MatrixRef::init(); 
      temporary = 0; 
      //numcon++; 
    }

inline void Matrix::fixref()		
    { transpose=0; scale=1.0; rowstride=ncols; store=slink.Store(); }

inline Matrix::Matrix ()
    { init(); }

inline Matrix::Matrix(const Matrix &M)	
    { init(); copy(M); }

inline Matrix::Matrix(int s1, int s2)
    { init(); makematrix(s1, s2); }

inline Matrix::Matrix(const MatrixRef &M)
    { init(); makematrix(M.Nrows(), M.Ncols()); MatrixRef::operator=(M); }

inline Matrix::~Matrix ()
    { 
        makematrix(0, 0); 
        Matrix::numcon()--; 
    }

inline void Matrix::ReDimension(int s1, int s2)
    { makematrix(s1, s2); }

inline int Matrix::Storage() const
    { return slink.Storage(); }

inline MatrixRef & Matrix::operator = (const Matrix &M)
    {
    if (&M != this) copy(M);
    return *this;
    }

// Assignment by destroying other matrix:
inline void Matrix::CopyDestroy(Matrix &M)
    { if (&M != this) copytransfer(M); }

inline MatrixRef & Matrix::operator = (const MatrixRef &M)
    {
    makematrix(M.Nrows(), M.Ncols());
    MatrixRef::operator=(M);
    return *this;
    }

inline MatrixRef& Matrix::operator = (const MatrixMatrixRes &R)
    {
    makematrix(R.Nrows(), R.Ncols());
    MatrixRef::operator=(R);
    return *this;
    }

inline MatrixRef& Matrix::operator = (Real a)
    { MatrixRef::operator=(a); return *this; }

inline Matrix Matrix::operator + (Real a) const
    { Matrix res(*this); res += a; return res; }

inline Matrix operator + (Real a, const Matrix& M)
    { return M+a; }

inline int Matrix::GetNumMats()
    { return Matrix::nummats(); }

inline void Matrix::ResetNumMats()
    { Matrix::nummats() = 0; }

inline int Matrix::GetNumCon()
    { return Matrix::numcon(); }

inline void Matrix::MakeTemp()
    { temporary = 1; }

inline int Matrix::memory() const
    { return sizeof(MatrixRef) + slink.memory(); }

inline Real & Matrix::el(int i1, int i2)
    {
    CHECKIND0(i1,i2);
    return store[i1 * ncols + i2];
    }

inline Real Matrix::el(int i1, int i2) const
    {
    CHECKIND0(i1,i2);
    return store[i1 * ncols + i2];
    }

inline Real 
Matrix::operator() (int i1, int i2) const
    {
    CHECKIND(i1,i2);
    return store[(i1 - 1) * ncols + i2 - 1];
    }

inline Real &
Matrix::operator() (int i1, int i2)
    {
    CHECKIND(i1,i2);
    return store[(i1 - 1) * ncols + i2 - 1];
    }

inline void Vector::init()
    { 
        VectorRef::init(); 
        temporary = 0; 
        Vector::numcon()++; 
    }

inline void Vector::fixref()		
    { scale = 1.0; stride = 1; store=slink.Store(); }

inline Vector::Vector () 
    { init(); }

inline Vector::Vector (const Vector &V)
    { init(); copy(V); }

inline Vector::Vector (int s)
    { init(); makevector(s); }

inline Vector::Vector (int s, Real val)
    { init(); makevector(s); operator=(val); }

inline Vector::Vector (const VectorRef &V)
    { init(); makevector(V.Length()); VectorRef::operator=(V); }

inline Vector::~Vector ()
    { 
        makevector(0); 
        Vector::numcon()--; 
    }

inline int Vector::Storage() const
    { return slink.Storage(); }

inline void Vector::ReDimension(int s)
    { makevector(s); }

inline VectorRef& Vector::operator = (const Vector &V)
    { if (&V != this) copy(V); return *this; }

inline void Vector::CopyDestroy(Vector &V)
    { if (&V != this) copytransfer(V); }

inline VectorRef& Vector::operator = (const VectorRef &V)
    { makevector(V.Length()); VectorRef::operator=(V); return *this; }

inline VectorRef& Vector::operator = (const MatrixVectorRes &R)
    { makevector(R.Length()); VectorRef::operator=(R); return *this; }

inline VectorRef& Vector::operator = (const VectorVectorRes &R)
    { makevector(R.Length()); VectorRef::operator=(R); return *this; }

inline VectorRef& Vector::operator = (Real a)
    { VectorRef::operator=(a); return *this; }

inline void Vector::MakeTemp()
    { temporary = 1; }

inline int Vector::memory() const		// return memory used in bytes 
    { return sizeof(VectorRef) + slink.memory(); }

inline Real & Vector::operator() (int i)
    { CHECKINDEX(i); return store[i - 1]; }

inline Real Vector::operator() (int i) const
    {
    CHECKINDEX(i);
    return store[i - 1];
    }

inline Real & Vector::operator[] (int i)
    { CHECKINDEX0(i); return store[i]; }

inline Real Vector::operator[] (int i) const
    { CHECKINDEX0(i); return store[i]; }

inline Real & Vector::el(int i)
    { return (*this)[i]; }

inline Real Vector::el(int i) const
    { return (*this)[i]; }

inline Vector Matrix::vector() const	// Make a Vector from a matrix 
    {
    if (Ncols() != 1)
	_merror("Bad conversion from Matrix to Vector");
    return Column(1);
    }

inline MatrixMatrixRes::operator Matrix() const
    { Matrix res(Nrows(),Ncols()); res = *this; return res;  }

inline MatrixVectorRes::operator Vector() const
    { Vector res(Length()); res = *this; return res;  }
// inline Vector& vector(const MatrixVectorRes& MV) 
//     { Vector res(MV.Length()); res = MV; return res;  }

inline VectorVectorRes::operator Vector() const
    { Vector res(Length()); res = *this; return res;  }

